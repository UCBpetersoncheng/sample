import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import java.lang.Math;

/*
 * This is the skeleton for CS61c project 1, Fall 2012.
 *
 * Contact Alan Christopher or Ravi Punj with questions and comments.
 *
 * Reminder:  DO NOT SHARE CODE OR ALLOW ANOTHER STUDENT TO READ YOURS.
 * EVEN FOR DEBUGGING. THIS MEANS YOU.
 *
 */
public class Proj1 {

    /** An Example Writable which contains two Double Objects. */
    public static class DoublePair implements Writable {
        /** The double objects I wrap. */
	private double a, b;

	/** Initializes me to contain zero. */
	public DoublePair() {
	    a = b = 0;
	}
	
	/** Initializes me to contain A, B. */
        public DoublePair(double a, double b) {
            this.a = a;
	    this.b = b;
        }

	/** Sets a to x and b to y. */
	public void set(double x, double y) {
	    this.a = x;
	    this.b = y;
	}

        /** Serializes object - needed for Writable. */
        public void write(DataOutput out) throws IOException {
            new DoubleWritable(a).write(out);
	    new DoubleWritable(b).write(out);
        }

        /** Deserializes object - needed for Writable. */
        public void readFields(DataInput in) throws IOException {
	    DoubleWritable tmp = new DoubleWritable();
	    tmp.readFields(in);
	    a = new Double(tmp.toString());
	    
	    tmp.readFields(in);
	    b = new Double(tmp.toString());
        }

	/** Returns A. */
	public double getA() {
	    return a;
	}
	/** Returns B. */
	public double getB() {
	    return b;
	}
    }
 

  /**
   * Inputs a set of (docID, document contents) pairs.
   * Outputs a set of (Text, Text) pairs.
   */
    public static class Map1 extends Mapper<WritableComparable, Text, Text, DoublePair> {
        /** Regex pattern to find words (alphanumeric + _). */
        final static Pattern WORD_PATTERN = Pattern.compile("\\w+");

        private String targetGram = null;
	private int funcNum = 0;
	Text t = new Text();
	DoublePair d = new DoublePair(1,1);

        /*
         * Setup gets called exactly once for each mapper, before map() gets called the first time.
         * It's a good place to do configuration or setup that can be shared across many calls to map
         */
        @Override
        public void setup(Context context) {
            targetGram = context.getConfiguration().get("targetGram").toLowerCase();
	    try {
		funcNum = Integer.parseInt(context.getConfiguration().get("funcNum"));
	    } catch (NumberFormatException e) {
		/* Do nothing. */
	    }
        }

        @Override
        public void map(WritableComparable docID, Text docContents, Context context)
                throws IOException, InterruptedException {
            Matcher matcher = WORD_PATTERN.matcher(docContents.toString());
	    Func func = funcFromNum(funcNum);
	    String[] targetSplit = targetGram.split(" ");
	    int n = targetSplit.length;
	    ArrayList <String> textArray = new ArrayList<String>();
	    ArrayList <Integer> textIndices = new ArrayList<Integer>();

	    //Maybe read in the input?
	    parse:
            while (matcher.find()) {
		textArray.add(matcher.group().toLowerCase());
            }
	    //Maybe do something with the input?
	    for (int i = 0; i <= textArray.size() - n; i++) {
		String nGram = "";
		for (int x = 0; x < n; x++) {
		    nGram += textArray.get(i + x) + " ";
		}
		if (nGram.equals(targetGram + " ")) {
		    textIndices.add(i);
		}
	    }
	    //Maybe generate output?
	    for (int i = 0; i <= textArray.size() - n; i++) {
		String nGram = "";
		for (int x = 0; x < n; x++) {
		    nGram += textArray.get(i + x) + " ";
		}
		if (nGram.equals(targetGram + " ")) {
		}
		else {
		    double x = distance(i, textIndices);
		    x = func.f(x);
		    t.set(nGram);
		    d.set(x,1);
		    context.write(t, d);
		}
	    }
	}

	/** Returns the minimum distance of an indexed n-gram to a target gram. */
	private double distance(int n, ArrayList<Integer> target) {
	    double result = Double.POSITIVE_INFINITY;
	    for (int i = 0; i < target.size(); i++) {
		double k = (double) Math.abs(target.get(i) - n);
		result = Math.min(k, result);
	    }
	    return result;
	}

	/** Returns the Func corresponding to FUNCNUM*/
	private Func funcFromNum(int funcNum) {
	    Func func = null;
	    switch (funcNum) {
	    case 0:	
		func = new Func() {
			public double f(double d) {
			    return d == Double.POSITIVE_INFINITY ? 0.0 : 1.0;
			}			
		    };	
		break;
	    case 1:
		func = new Func() {
			public double f(double d) {
			    return d == Double.POSITIVE_INFINITY ? 0.0 : 1.0 + 1.0 / d;
			}			
		    };
		break;
	    case 2:
		func = new Func() {
			public double f(double d) {
			    return d == Double.POSITIVE_INFINITY ? 0.0 : Math.sqrt(d);
			}			
		    };
		break;
	    }
	    return func;
	}
    }

    /** Here's where you'll be implementing your combiner. It must be non-trivial for you to receive credit. */
    public static class Combine1 extends Reducer<Text, DoublePair, Text, DoublePair> {

      DoublePair dresult = new DoublePair(1,1);

      @Override
      public void reduce(Text key, Iterable<DoublePair> values,
              Context context) throws IOException, InterruptedException {
	  double sum = 0;
	  double len = 0;
	  for (DoublePair d : values) {
	      sum += d.getA();
	      len += d.getB();
	  }
	  dresult.set(sum,len);
	  context.write(key, dresult);
      }
    }


    public static class Reduce1 extends Reducer<Text, DoublePair, DoubleWritable, Text> {
        
	DoubleWritable dresult = new DoubleWritable();
	
	@Override
        public void reduce(Text key, Iterable<DoublePair> values,
			   Context context) throws IOException, InterruptedException {
	    double sum = 0;
	    int len = 0;
	    double result = 0;

	    for (DoublePair d : values) {
		sum += d.getA();
		len += d.getB();
	    }
	    if (sum > 0) {
		result = Math.log(sum);
		result = Math.pow(result, 3);
		result = sum * result/len;
	    }
	    dresult.set(result);
	    context.write(dresult, key);
        }
    }

    public static class Map2 extends Mapper<DoubleWritable, Text, DoubleWritable, Text> {
	//maybe do something, maybe don't
	DoubleWritable d = new DoubleWritable();
	
	@Override
        public void map(DoubleWritable coOccurRate, Text nGram, Context context)
                throws IOException, InterruptedException {
	    DoubleWritable d = new DoubleWritable();
	    d.set(coOccurRate.get() * - 1);
	    context.write(d , nGram);
	}
    }

    public static class Reduce2 extends Reducer<DoubleWritable, Text, DoubleWritable, Text> {

      int n = 0;
      static int N_TO_OUTPUT = 100;
      DoubleWritable k = new DoubleWritable();

      /*
       * Setup gets called exactly once for each reducer, before reduce() gets called the first time.
       * It's a good place to do configuration or setup that can be shared across many calls to reduce
       */
      @Override
      protected void setup(Context c) {
        n = 0;
      }

        @Override
        public void reduce(DoubleWritable key, Iterable<Text> values,
                Context context) throws IOException, InterruptedException {
	    //you should be outputting the final values here.
	    k.set(Math.abs(key.get()));
	    for(Text value: values) {
		n += 1;
		if (n <= N_TO_OUTPUT) {
		    context.write(k, value);
		} else {
		    break;
		}
	    }
        }
    }

    /*
     *  You shouldn't need to modify this function much. If you think you have a good reason to,
     *  you might want to discuss with staff.
     *
     *  The skeleton supports several options.
     *  if you set runJob2 to false, only the first job will run and output will be
     *  in TextFile format, instead of SequenceFile. This is intended as a debugging aid.
     *
     *  If you set combiner to false, neither combiner will run. This is also
     *  intended as a debugging aid. Turning on and off the combiner shouldn't alter
     *  your results. Since the framework doesn't make promises about when it'll
     *  invoke combiners, it's an error to assume anything about how many times
     *  values will be combined.
     */
    public static void main(String[] rawArgs) throws Exception {
        GenericOptionsParser parser = new GenericOptionsParser(rawArgs);
        Configuration conf = parser.getConfiguration();
        String[] args = parser.getRemainingArgs();

        boolean runJob2 = conf.getBoolean("runJob2", true);
        boolean combiner = conf.getBoolean("combiner", false);

        if(runJob2)
          System.out.println("running both jobs");
        else
          System.out.println("for debugging, only running job 1");

        if(combiner)
          System.out.println("using combiner");
        else
          System.out.println("NOT using combiner");

        Path inputPath = new Path(args[0]);
        Path middleOut = new Path(args[1]);
        Path finalOut = new Path(args[2]);
        FileSystem hdfs = middleOut.getFileSystem(conf);
        int reduceCount = conf.getInt("reduces", 32);

        if(hdfs.exists(middleOut)) {
          System.err.println("can't run: " + middleOut.toUri().toString() + " already exists");
          System.exit(1);
        }
        if(finalOut.getFileSystem(conf).exists(finalOut) ) {
          System.err.println("can't run: " + finalOut.toUri().toString() + " already exists");
          System.exit(1);
        }

        {
            Job firstJob = new Job(conf, "wordcount+co-occur");

            firstJob.setJarByClass(Map1.class);

	    /* You may need to change things here */
            firstJob.setMapOutputKeyClass(Text.class);
            firstJob.setMapOutputValueClass(DoublePair.class);
            firstJob.setOutputKeyClass(DoubleWritable.class);
            firstJob.setOutputValueClass(Text.class);
	    /* End region where we expect you to perhaps need to change things. */

            firstJob.setMapperClass(Map1.class);
            firstJob.setReducerClass(Reduce1.class);
            firstJob.setNumReduceTasks(reduceCount);


            if(combiner)
              firstJob.setCombinerClass(Combine1.class);

            firstJob.setInputFormatClass(SequenceFileInputFormat.class);
            if(runJob2)
	      firstJob.setOutputFormatClass(SequenceFileOutputFormat.class);

            FileInputFormat.addInputPath(firstJob, inputPath);
            FileOutputFormat.setOutputPath(firstJob, middleOut);

            firstJob.waitForCompletion(true);
        }

        if(runJob2) {
            Job secondJob = new Job(conf, "sort");

            secondJob.setJarByClass(Map1.class);
	    /* You may need to change things here */
            secondJob.setMapOutputKeyClass(DoubleWritable.class);
            secondJob.setMapOutputValueClass(Text.class);
            secondJob.setOutputKeyClass(DoubleWritable.class);
            secondJob.setOutputValueClass(Text.class);
	    /* End region where we expect you to perhaps need to change things. */

            secondJob.setMapperClass(Map2.class);
            if(combiner)
		secondJob.setCombinerClass(Reduce2.class);
            secondJob.setReducerClass(Reduce2.class);

            secondJob.setInputFormatClass(SequenceFileInputFormat.class);
            secondJob.setOutputFormatClass(TextOutputFormat.class);
            secondJob.setNumReduceTasks(1);


            FileInputFormat.addInputPath(secondJob, middleOut);
            FileOutputFormat.setOutputPath(secondJob, finalOut);

            secondJob.waitForCompletion(true);
        }
    }

}
